diff --git src/gui/text/qfontdatabase.cpp src/gui/text/qfontdatabase.cpp
index 008ddad5cd16e1b73cd7c87e062c33c2cb8c4559..3f58aed67ad89270a25cee2ba8a16c0e94cfafc5 100644
--- src/gui/text/qfontdatabase.cpp
+++ src/gui/text/qfontdatabase.cpp
@@ -98,9 +98,9 @@ static int getFontWeight(const QString &weightString)
         return QFont::DemiBold;
     if (s == QLatin1String("medium"))
         return QFont::Medium;
-    if (s == QLatin1String("black"))
+    if (s == QLatin1String("black") || s == QLatin1String("heavy"))
         return QFont::Black;
-    if (s == QLatin1String("light"))
+    if (s == QLatin1String("light") || s == QLatin1String("book"))
         return QFont::Light;
     if (s == QLatin1String("thin"))
         return QFont::Thin;
@@ -115,34 +115,39 @@ static int getFontWeight(const QString &weightString)
     // Next up, let's see if contains() matches: slightly more expensive, but
     // still fast enough.
     if (s.contains(QLatin1String("bold"))) {
-        if (s.contains(QLatin1String("demi")))
+        if (s.contains(QLatin1String("demi")) || s.contains(QLatin1String("semi")))
             return QFont::DemiBold;
         return QFont::Bold;
     }
     if (s.contains(QLatin1String("thin")))
         return QFont::Thin;
-    if (s.contains(QLatin1String("light")))
+    if (s.contains(QLatin1String("light")) || s.contains(QLatin1String("book")))
         return QFont::Light;
-    if (s.contains(QLatin1String("black")))
+    if (s.contains(QLatin1String("black")) || s.contains(QLatin1String("heavy")))
         return QFont::Black;
 
     // Now, we perform string translations & comparisons with those.
     // These are (very) slow compared to simple string ops, so we do these last.
     // As using translated values for such things is not very common, this should
     // not be too bad.
-    if (s.compare(QCoreApplication::translate("QFontDatabase", "Normal", "The Normal or Regular font weight"), Qt::CaseInsensitive) == 0)
+    if (s.compare(QCoreApplication::translate("QFontDatabase", "Normal", "The Normal or Regular font weight"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Regular", "The Normal or Regular font weight"), Qt::CaseInsensitive) == 0)
         return QFont::Normal;
     const QString translatedBold = QCoreApplication::translate("QFontDatabase", "Bold").toLower();
     if (s == translatedBold)
         return QFont::Bold;
-    if (s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0)
+    if (s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Semi Bold"), Qt::CaseInsensitive) == 0)
         return QFont::DemiBold;
     if (s.compare(QCoreApplication::translate("QFontDatabase", "Medium", "The Medium font weight"), Qt::CaseInsensitive) == 0)
         return QFont::Medium;
-    if (s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
+    if (s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0)
         return QFont::Black;
     const QString translatedLight = QCoreApplication::translate("QFontDatabase", "Light").toLower();
-    if (s == translatedLight)
+    const QString translatedSemiLight = QCoreApplication::translate("QFontDatabase", "SemiLight").toLower();
+    const QString translatedBook = QCoreApplication::translate("QFontDatabase", "Book").toLower();
+    if (s == translatedLight || s == translatedSemiLight || s == translatedBook)
         return QFont::Light;
     if (s.compare(QCoreApplication::translate("QFontDatabase", "Thin"), Qt::CaseInsensitive) == 0)
         return QFont::Thin;
@@ -157,7 +162,8 @@ static int getFontWeight(const QString &weightString)
     if (s.contains(translatedBold)) {
         //: The word for "Demi" as in "Demi Bold" used as a pattern for string searches
         QString translatedDemi = QCoreApplication::translate("QFontDatabase", "Demi").toLower();
-        if (s .contains(translatedDemi))
+        QString translatedSemi = QCoreApplication::translate("QFontDatabase", "Semi").toLower();
+        if (s .contains(translatedDemi) || s.contains(translatedSemi))
             return QFont::DemiBold;
         if (s.contains(translatedExtra))
             return QFont::ExtraBold;
@@ -1303,7 +1309,8 @@ static QString styleStringHelper(int weight, QFont::Style style)
 {
     QString result;
     if (weight > QFont::Normal) {
-        if (weight >= QFont::Black)
+        // The Apple-provided Avenir Black-Oblique has weight 81 when loaded through the xcb platform plugin
+        if (weight >= 81 /*QFont::Black*/)
             result = QCoreApplication::translate("QFontDatabase", "Black");
         else if (weight >= QFont::ExtraBold)
             result = QCoreApplication::translate("QFontDatabase", "Extra Bold");
@@ -1330,6 +1337,8 @@ static QString styleStringHelper(int weight, QFont::Style style)
     if (result.isEmpty())
         result = QCoreApplication::translate("QFontDatabase", "Normal", "The Normal or Regular font weight");
 
+    // RJVB
+//     qDebug() << "styleStringHelper.weight=" << weight << "style=" << style << "=>" << result;
     return result.simplified();
 }
 
@@ -1850,6 +1859,9 @@ QFont QFontDatabase::font(const QString &family, const QString &style,
     if (!s) // no styles found?
         return QGuiApplication::font();
 
+    // RJVB
+//    qDebug() << "QFontDatabase::font(" << family << "," << style << "," << pointSize << ")"
+//             << "will load font with weight" << s->key.weight << "and style" << s->styleName << s->key.style;
     QFont fnt(family, pointSize, s->key.weight);
     fnt.setStyle((QFont::Style)s->key.style);
     if (!s->styleName.isEmpty())
diff --git src/gui/text/qplatformfontdatabase.cpp src/gui/text/qplatformfontdatabase.cpp
index a911014a195c5a019fbb6d8d678d5b6dfc846401..346a77350742b09601a56c2fe38ab9c3ff3389ee 100644
--- src/gui/text/qplatformfontdatabase.cpp
+++ src/gui/text/qplatformfontdatabase.cpp
@@ -630,6 +630,12 @@ QSupportedWritingSystems QPlatformFontDatabase::writingSystemsFromTrueTypeBits(q
     a given opentype integer value. Converts the integer
     \a weight (0 ~ 1000) to QFont::Weight and returns it.
 
+    Thin (200), Light (300) or Book (380 !)
+    Normal or Regular : (500)
+    Demi Bold, Semi Bold or Medium (615 or 650)
+    Bold (700)
+    ExtraBold or Ultra (750), Heavy or Black (810)
+
     \since 5.5
 */
 
@@ -639,17 +645,18 @@ QFont::Weight QPlatformFontDatabase::weightFromInteger(int weight)
         return QFont::Thin;
     if (weight < 250)
         return QFont::ExtraLight;
-    if (weight < 350)
+    // Book style is mapped to Light
+    if (weight <= 380)
         return QFont::Light;
     if (weight < 450)
         return QFont::Normal;
     if (weight < 550)
         return QFont::Medium;
-    if (weight < 650)
+    if (weight < 700)
         return QFont::DemiBold;
     if (weight < 750)
         return QFont::Bold;
-    if (weight < 850)
+    if (weight < 810)
         return QFont::ExtraBold;
     return QFont::Black;
 }
diff --git src/platformsupport/fontdatabases/freetype/qfreetypefontdatabase.cpp src/platformsupport/fontdatabases/freetype/qfreetypefontdatabase.cpp
index 4baba64de396296ca742e24cd6e70b2d9767d24f..8a8297def280774f0f8eba8a3c97a9b2debf3de2 100644
--- src/platformsupport/fontdatabases/freetype/qfreetypefontdatabase.cpp
+++ src/platformsupport/fontdatabases/freetype/qfreetypefontdatabase.cpp
@@ -177,19 +177,24 @@ QStringList QFreeTypeFontDatabase::addTTFile(const QByteArray &fontData, const Q
                     weight = QFont::Thin;
                 else if (w <= 2)
                     weight = QFont::ExtraLight;
-                else if (w <= 3)
+                // Book (which is lighter than Normal) is 4, *if these values
+                // are identical to those returned by [NSFontManager weightOfFont:] on OS X*
+                else if (w <= 4)
                     weight = QFont::Light;
                 else if (w <= 5)
                     weight = QFont::Normal;
                 else if (w <= 6)
                     weight = QFont::Medium;
-                else if (w <= 7)
-                    weight = QFont::DemiBold;
+                // DemiBold goes up to (incl.) 8 according to [NSFontManager weightOfFont:] on OS X
                 else if (w <= 8)
+                    weight = QFont::DemiBold;
+                // Bold is 9 according to [NSFontManager weightOfFont:] on OS X
+                else if (w == 9)
                     weight = QFont::Bold;
-                else if (w <= 9)
+                else if (w == 10)
                     weight = QFont::ExtraBold;
-                else if (w <= 10)
+                // Heavy and Black are 11 according to [NSFontManager weightOfFont:] on OS X
+                else if (w > 10)
                     weight = QFont::Black;
             }
         }
diff --git src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
index a52e157768b68afe77c8658ea2b8a7ed3502bf31..6aa283d384277fc37c82d80e902240f8a79ced07 100644
--- src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
+++ src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
@@ -245,8 +245,15 @@ static void getFontDescription(CTFontDescriptorRef font, FontDescription *fd)
     if (styles) {
         if (CFNumberRef weightValue = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontWeightTrait)) {
             double normalizedWeight;
-            if (CFNumberGetValue(weightValue, kCFNumberFloat64Type, &normalizedWeight))
+            if (CFNumberGetValue(weightValue, kCFNumberFloat64Type, &normalizedWeight)) {
+                if (!qgetenv("QT_DUMP_FONT_STYLE_WEIGHTS").isEmpty()) {
+                    NSFont *nfont = [NSFont fontWithDescriptor:(NSFontDescriptor*)font size:(CGFloat)12];
+                    qDebug() << "Font" << QString::fromCFString(fd->familyName) << "style"
+                             << QString::fromCFString(fd->styleName) << "weight=" << normalizedWeight
+                             << "NSFont weight@12pt=" << [[NSFontManager sharedFontManager] weightOfFont:nfont];
+                }
                 fd->weight = QCoreTextFontEngine::qtWeightFromCFWeight(float(normalizedWeight));
+            }
         }
         if (CFNumberRef italic = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontSlantTrait)) {
             double d;
@@ -673,6 +680,16 @@ QFont *QCoreTextFontDatabase::themeFont(QPlatformTheme::Font f) const
         CFRelease(fontDesc);
 
     QFont *font = new QFont(fd.familyName, fd.pointSize, fd.weight, fd.style == QFont::StyleItalic);
+        if (!qgetenv("QT_DUMP_THEME_FONT").isEmpty()) {
+            fontDesc = fontDescriptorFromTheme(f);
+            NSFont *nfont = [NSFont fontWithDescriptor:(NSFontDescriptor*)fontDesc size:(CGFloat)12];
+            qDebug() << "themeFont" << f << ":" << fontTypeFromTheme(f) << "="
+                     << QString::fromCFString(fd.familyName) << "style"
+                     << QString::fromCFString(fd.styleName)
+                     << "NSFont weight@12pt=" << [[NSFontManager sharedFontManager] weightOfFont:nfont]
+                     << "QFont=" << font->key();
+            CFRelease(fontDesc);
+        }
     return font;
 }
 
diff --git src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
index 072dd1a28a8273c5d0afea3b495de1e048a33c8c..4754920c7e5cd58dbcf94ea3999bab7d8c22e89f 100644
--- src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
+++ src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
@@ -248,6 +248,12 @@ void QCoreTextFontEngine::init()
             CFNumberRef traitNum = (CFNumberRef) CFDictionaryGetValue(allTraits, trait);
             float v = 0;
             CFNumberGetValue(traitNum, kCFNumberFloatType, &v);
+            // the value we get from CFNumberRef is from -1.0 to 1.0:
+            // Thin (-0.6), Light (-0.4) or Book (-0.23 !)
+            // Normal or Regular : (0)
+            // Demi Bold, Semi Bold or Medium (0.23 or 0.3)
+            // Bold (0.4)
+            // ExtraBold or Ultra (0.5), Heavy or Black (0.62)
             return v;
         }
         return 0;
diff --git src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
index 1b3d29c87f6421dbe1212df2be20db1c2ec0b5bb..a9aaadfeef8a057a033dbaced4bb031fa9892028 100644
--- src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
+++ src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
@@ -338,19 +338,68 @@ public:
 
         int weight = 5;
         NSFontTraitMask mask = 0;
-        if (font.style() == QFont::StyleItalic) {
+        if (font.style() == QFont::StyleItalic || font.style() == QFont::StyleOblique) {
             mask |= NSItalicFontMask;
         }
-        if (font.weight() == QFont::Bold) {
-            weight = 9;
-            mask |= NSBoldFontMask;
-        }
+        // RJVB
+        // UltraLight -> 2 or 3
+        // Thin,Light -> 3, Book -> 4
+        // Normal/Regular -> 5
+        // Medium/SemiBold/Demibold -> 6,7,8
+        // Bold -> 9
+        // Ultra/Black/Heavy -> 10,11
+        QVector<int> weights;
+        switch (font.weight()) {
+            case QFont::Thin:
+                weights << 2;
+                // fall through;
+            case QFont::Light:
+            case QFont::ExtraLight:
+                weights << 3 << 4;
+                break;
+            case QFont::Normal:
+                weights << 5;
+                break;
+            case QFont::Medium:
+                weights << 6;
+                // fall through
+            case QFont::DemiBold:
+                weights << 7 << 8;
+                break;
+            case QFont::Bold:
+                weights << 9;
+                break;
+            case QFont::Black:
+                weights << 10 << 11;
+                break;
+         }
 
         QFontInfo fontInfo(font);
-        nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
-            traits:mask
-            weight:weight
-            size:fontInfo.pointSize()];
+        if (!weights.isEmpty()) {
+            for (int i = 0; i < weights.size() && !nsFont; ++i) {
+                weight = weights[i];
+                nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
+                         traits:mask
+                         weight:weight
+                         size:fontInfo.pointSize()];
+//                  qDebug() << "setCurrentFont: found" << font << "with Qt weight" << font.weight() << "as NSFont weight" << weight << "(index" << i << ")";
+//                  NSLog(@"NSFont=%@", nsFont);
+                 if ([mgr weightOfFont:const_cast<NSFont *>(nsFont)] != weight) {
+                     nsFont = NULL;
+                 }
+            }
+        }
+        if (!nsFont) {
+            // fallback to the older approach
+            if (font.weight() == QFont::Bold) {
+                weight = 9;
+                mask |= NSBoldFontMask;
+            }
+            nsFont = [mgr fontWithFamily:fontInfo.family().toNSString()
+                     traits:mask
+                     weight:weight
+                     size:fontInfo.pointSize()];
+        }
 
         [mgr setSelectedFont:nsFont isMultiple:NO];
         mDelegate->mQtFont = font;
diff --git src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
index c64a02fa0cb4fb7b15b99abaecceb468dda78e10..98b2a15f4c232b29e0856fe9cedf9cb257e51b82 100644
--- src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
+++ src/plugins/platformthemes/gtk3/qgtk3dialoghelpers.cpp
@@ -543,6 +543,10 @@ static QString qt_fontToString(const QFont &font)
         pango_font_description_set_weight(desc, PANGO_WEIGHT_MEDIUM);
     else if (weight >= QFont::Normal)
         pango_font_description_set_weight(desc, PANGO_WEIGHT_NORMAL);
+    else if (weight >= PANGO_WEIGHT_BOOK)
+        pango_font_description_set_weight(desc, PANGO_WEIGHT_BOOK);
+    else if (weight >= 350 /*PANGO_WEIGHT_SEMILIGHT*/)
+        pango_font_description_set_weight(desc, static_cast<PangoWeight>(350));
     else if (weight >= QFont::Light)
         pango_font_description_set_weight(desc, PANGO_WEIGHT_LIGHT);
     else if (weight >= QFont::ExtraLight)
diff --git src/widgets/dialogs/qfontdialog.cpp src/widgets/dialogs/qfontdialog.cpp
index 477c6bd540305fcdd6a0cbb89356e42a33e90b08..2d601019102b4a68e8b8bb9a4bcd706da4c2c0f8 100644
--- src/widgets/dialogs/qfontdialog.cpp
+++ src/widgets/dialogs/qfontdialog.cpp
@@ -327,6 +327,27 @@ void QFontDialogPrivate::init()
     familyList->setFocus();
     retranslateStrings();
     sampleEdit->setObjectName(QLatin1String("qt_fontDialog_sampleEdit"));
+    // RJVB 20150511
+    lightStyles << QCoreApplication::translate("QFontDatabase", "Thin")
+                << QCoreApplication::translate("QFontDatabase", "Light");
+    bookStyles << QCoreApplication::translate("QFontDatabase", "Semilight")
+                << QCoreApplication::translate("QFontDatabase", "Semi Light")
+                << QCoreApplication::translate("QFontDatabase", "Book");
+    normalStyles << QCoreApplication::translate("QFontDatabase", "Normal")
+                << QCoreApplication::translate("QFontDatabase", "Regular")
+                << QCoreApplication::translate("QFontDatabase", "Roman");
+    mediumStyles << QCoreApplication::translate("QFontDatabase", "Medium");
+    demiBoldStyles << QCoreApplication::translate("QFontDatabase", "DemiBold")
+                << QCoreApplication::translate("QFontDatabase", "Demi Bold")
+                << QCoreApplication::translate("QFontDatabase", "SemiBold")
+                << QCoreApplication::translate("QFontDatabase", "Semi Bold");
+    blackStyles << QCoreApplication::translate("QFontDatabase", "Black")
+                << QCoreApplication::translate("QFontDatabase", "Ultra")
+                << QCoreApplication::translate("QFontDatabase", "Heavy")
+                << QCoreApplication::translate("QFontDatabase", "UltraBold");
+    italicStyle = QCoreApplication::translate("QFontDatabase", "Italic");
+    obliqueStyle = QCoreApplication::translate("QFontDatabase", "Oblique");
+    slantStyles << italicStyle << obliqueStyle;
 }
 
 /*!
@@ -557,6 +578,22 @@ void QFontDialogPrivate::updateFamilies()
     updateStyles();
 }
 
+static inline bool qstringCompareToList(const QString &style, const QStringList &checkList, bool exact, Qt::CaseSensitivity mode = Qt::CaseInsensitive)
+{
+    if (exact) {
+        foreach (const QString &pattern, checkList) {
+            if (style.compare(pattern, mode) == 0)
+                return true;
+        }
+    } else {
+        foreach (const QString &pattern, checkList) {
+            if (style.contains(pattern, mode))
+                return true;
+        }
+    }
+    return false;
+}
+
 /*
     Updates the contents of the "font style" list box. This
     function can be reimplemented if you have special requirements.
@@ -566,32 +603,76 @@ void QFontDialogPrivate::updateStyles()
     Q_Q(QFontDialog);
     QStringList styles = fdb.styles(familyList->currentText());
     styleList->model()->setStringList(styles);
+    // RJVB
+//     qDebug() << "QFontDialogPrivate::updateStyles() familyList="
+//             << familyList->currentText() << "style=" << style
+//             << "styles=" << styles << "styleList=" << styleList;
 
     if (styles.isEmpty()) {
         styleEdit->clear();
         smoothScalable = false;
     } else {
+        QStringList lLightStyles = lightStyles, lDemiBoldStyles = demiBoldStyles;
+        QString lightStr = QCoreApplication::translate("QFontDatabase", "Light"),
+            mediumStr = QCoreApplication::translate("QFontDatabase", "Medium");
         if (!style.isEmpty()) {
             bool found = false;
             bool first = true;
             QString cstyle = style;
+            bool compareExact = true;
 
         redo:
+            if (style.contains(lightStr, Qt::CaseInsensitive) && !styles.contains(lightStr, Qt::CaseInsensitive)) {
+                // this is a Book weight that was "demoted" to Light because Qt doesn't know Book as a separate style,
+                // so we add Book as a valid synonym to lightStyles.
+                lLightStyles << bookStyles; //QCoreApplication::translate("QFontDatabase", "Book");
+            }
+            if (style.contains(mediumStr, Qt::CaseInsensitive) && !styles.contains(mediumStr, Qt::CaseInsensitive)) {
+                // this was a deduced Medium style which isn't called that way by the font family
+                lDemiBoldStyles << QCoreApplication::translate("QFontDatabase", "Medium");
+            }
             for (int i = 0; i < (int)styleList->count(); i++) {
-                if (cstyle == styleList->text(i)) {
+                QString istyle = styleList->text(i);
+                if (cstyle == istyle) {
                      styleList->setCurrentItem(i);
                      found = true;
                      break;
                  }
+                // RJVB 20150419: handle style synonyms
+                if ((qstringCompareToList(cstyle, lLightStyles, compareExact) && qstringCompareToList(istyle, lLightStyles, compareExact))
+                        || (qstringCompareToList(cstyle, bookStyles, compareExact) && qstringCompareToList(istyle, bookStyles, compareExact))
+                        || (qstringCompareToList(cstyle, normalStyles, compareExact) && qstringCompareToList(istyle, normalStyles, compareExact))
+                        || (qstringCompareToList(cstyle, mediumStyles, compareExact) && qstringCompareToList(istyle, mediumStyles, compareExact))
+                        || (qstringCompareToList(cstyle, lDemiBoldStyles, compareExact) && qstringCompareToList(istyle, lDemiBoldStyles, compareExact))
+                        || (qstringCompareToList(cstyle, blackStyles, compareExact) && qstringCompareToList(istyle, blackStyles, compareExact))) {
+//                     qDebug() << "cstyle=" << cstyle << "matches istyle=" << istyle << "for weight; exact matching=" << compareExact
+//                         << "hit in list" << lastCheckList;
+                    if ((qstringCompareToList(cstyle, slantStyles, false) == qstringCompareToList(istyle, slantStyles, false))) {
+//                         qDebug() << "cstyle=" << cstyle << "also matches istyle=" << istyle << "for slant" << slantStyles;
+                        styleList->setCurrentItem(i);
+                        found = true;
+                        break;
+                    }
+//                     else {
+//                         qDebug() << "(" << cstyle << "," << istyle << ") vs" << slantStyles << "="
+//                             << qstringCompareToList(cstyle, slantStyles, false) << qstringCompareToList(istyle, slantStyles, false);
+//                     }
+                }
+            }
+            if (!found && compareExact) {
+                compareExact = false;
+                goto redo;
             }
             if (!found && first) {
-                if (cstyle.contains(QLatin1String("Italic"))) {
-                    cstyle.replace(QLatin1String("Italic"), QLatin1String("Oblique"));
+                if (cstyle.contains(italicStyle, Qt::CaseInsensitive)) {
+                    cstyle.replace(italicStyle, obliqueStyle, Qt::CaseInsensitive);
                     first = false;
+                    compareExact = true;
                     goto redo;
-                } else if (cstyle.contains(QLatin1String("Oblique"))) {
-                    cstyle.replace(QLatin1String("Oblique"), QLatin1String("Italic"));
+                } else if (cstyle.contains(obliqueStyle, Qt::CaseInsensitive)) {
+                    cstyle.replace(obliqueStyle, italicStyle, Qt::CaseInsensitive);
                     first = false;
+                    compareExact = true;
                     goto redo;
                 }
             }
@@ -813,6 +894,8 @@ void QFontDialog::setCurrentFont(const QFont &font)
         QFontInfo fi(font);
         d->size = fi.pointSize();
     }
+    // RJVB
+//     qDebug() << "QFontDialog::setCurrentFont" << font << "family=" << d->family << "style=" << d->style << "size=" << d->size;
     d->strikeout->setChecked(font.strikeOut());
     d->underline->setChecked(font.underline());
     d->updateFamilies();
diff --git src/widgets/dialogs/qfontdialog_p.h src/widgets/dialogs/qfontdialog_p.h
index 202247a3b44fbe6593f6037cc3149274e8110c59..7e0ebe3fc68f19eba143572a7f68bc9fa873c740 100644
--- src/widgets/dialogs/qfontdialog_p.h
+++ src/widgets/dialogs/qfontdialog_p.h
@@ -58,6 +58,7 @@
 #include "qfontdialog.h"
 #include <qpa/qplatformdialoghelper.h>
 #include "qsharedpointer.h"
+#include <QSet>
 
 QT_REQUIRE_CONFIG(fontdialog);
 
@@ -72,6 +73,63 @@ class QGroupBox;
 class QLabel;
 class QLineEdit;
 
+class QFontStyleSet : public QSet<QString>
+{
+public:
+    inline QFontStyleSet()
+        : QSet<QString>()
+    { 
+        checkList.clear();
+    }
+    inline QFontStyleSet(const QFontStyleSet &ref)
+        : QSet<QString>(ref)
+    {
+        checkList = ref.checkList;
+    }
+    inline QFontStyleSet(const QSet<QString> &ref)
+        : QSet<QString>(ref)
+    {
+        checkList = toList();
+    }
+    static inline QFontStyleSet fromList(QStringList &list)
+    {
+        QFontStyleSet newSet(QSet<QString>::fromList(list));
+        newSet.checkList = list;
+        return newSet;
+    }
+    inline bool contains(const QString &stylePattern) const
+    {
+        lastCheckList = checkList;
+        return QSet<QString>::contains(stylePattern);
+    }
+    inline bool contains(const QString &stylePattern, bool exact) const
+    {
+        if (exact) {
+            return contains(stylePattern);
+        } else {
+            foreach (const QString &pattern, checkList) {
+                if (stylePattern.contains(pattern)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+    inline QFontStyleSet &operator<<(const QString &value)
+    {
+        insert(value);
+        checkList << value;
+        return *this;
+    }
+    static inline QStringList lastList()
+    {
+        return lastCheckList;
+    }
+private:
+    QStringList checkList;
+    static QStringList lastCheckList;
+};
+
 class Q_AUTOTEST_EXPORT QFontDialogPrivate : public QDialogPrivate
 {
     Q_DECLARE_PUBLIC(QFontDialog)
@@ -147,6 +205,9 @@ public:
 private:
     virtual void initHelper(QPlatformDialogHelper *) override;
     virtual void helperPrepareShow(QPlatformDialogHelper *) override;
+    // RJVB 20150511
+    QStringList lightStyles, bookStyles, normalStyles, mediumStyles, demiBoldStyles, blackStyles, slantStyles;
+    QString obliqueStyle, italicStyle;
 };
 
 QT_END_NAMESPACE
