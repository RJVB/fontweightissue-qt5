diff --git qtbase/src/gui/text/qfont.h qtbase/src/gui/text/qfont.h
index 7fbaf24..e7b6954 100644
--- qtbase/src/gui/text/qfont.h
+++ qtbase/src/gui/text/qfont.h
@@ -94,8 +94,11 @@ public:
     };
 
     enum Weight {
+        Thin     = 0,
+        ExtraLight = 12,
         Light    = 25,
         Normal   = 50,
+        Medium   = 57,
         DemiBold = 63,
         Bold     = 75,
         Black    = 87
diff --git qtbase/src/gui/text/qfontdatabase.cpp qtbase/src/gui/text/qfontdatabase.cpp
index c3be9da..5974a58 100644
--- qtbase/src/gui/text/qfontdatabase.cpp
+++ qtbase/src/gui/text/qfontdatabase.cpp
@@ -95,24 +95,33 @@ static int getFontWeight(const QString &weightString)
     // Test in decreasing order of commonness
     if (s == QLatin1String("medium") ||
         s == QLatin1String("normal")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Regular"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Normal"), Qt::CaseInsensitive) == 0)
         return QFont::Normal;
     if (s == QLatin1String("bold")
         || s.compare(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive) == 0)
         return QFont::Bold;
     if (s == QLatin1String("demibold") || s == QLatin1String("demi bold")
+        || s == QLatin1String("semibold") || s == QLatin1String("semi bold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Semi Bold"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Demi Bold"), Qt::CaseInsensitive) == 0)
         return QFont::DemiBold;
-    if (s == QLatin1String("black")
+    if (s == QLatin1String("black") || s == QLatin1String("heavy")
+        || s == QLatin1String("ultra") || s == QLatin1String("ultrabold")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "UltraBold"), Qt::CaseInsensitive) == 0
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Ultra"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
         return QFont::Black;
-    if (s == QLatin1String("light"))
+    if (s == QLatin1String("light") || s == QLatin1String("book")
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Book"), Qt::CaseInsensitive) == 0)
         return QFont::Light;
 
     if (s.contains(QLatin1String("bold"))
         || s.contains(QCoreApplication::translate("QFontDatabase", "Bold"), Qt::CaseInsensitive)) {
-        if (s.contains(QLatin1String("demi"))
-            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0)
+        if (s.contains(QLatin1String("demi")) || s.contains(QLatin1String("semi"))
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Demi"), Qt::CaseInsensitive) == 0
+            || s.compare(QCoreApplication::translate("QFontDatabase", "Semi"), Qt::CaseInsensitive) == 0)
             return (int) QFont::DemiBold;
         return (int) QFont::Bold;
     }
@@ -121,7 +130,12 @@ static int getFontWeight(const QString &weightString)
         || s.compare(QCoreApplication::translate("QFontDatabase", "Light"), Qt::CaseInsensitive) == 0)
         return (int) QFont::Light;
 
-    if (s.contains(QLatin1String("black"))
+    if (s.contains(QLatin1String("medium"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Medium"), Qt::CaseInsensitive) == 0)
+        return (int) QFont::Medium;
+
+    if (s.contains(QLatin1String("black")) || s.contains(QLatin1String("heavy"))
+        || s.compare(QCoreApplication::translate("QFontDatabase", "Heavy"), Qt::CaseInsensitive) == 0
         || s.compare(QCoreApplication::translate("QFontDatabase", "Black"), Qt::CaseInsensitive) == 0)
         return (int) QFont::Black;
 
@@ -137,7 +151,8 @@ QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -1170,14 +1185,24 @@ static int match(int script, const QFontDef &request,
 static QString styleStringHelper(int weight, QFont::Style style)
 {
     QString result;
-    if (weight >= QFont::Black)
-        result = QCoreApplication::translate("QFontDatabase", "Black");
-    else if (weight >= QFont::Bold)
-        result = QCoreApplication::translate("QFontDatabase", "Bold");
-    else if (weight >= QFont::DemiBold)
-        result = QCoreApplication::translate("QFontDatabase", "Demi Bold");
-    else if (weight < QFont::Normal)
-        result = QCoreApplication::translate("QFontDatabase", "Light");
+    if (weight > QFont::Normal) {
+        // The Apple-provided Avenir Black-Oblique has weight 81 when loaded through the xcb platform plugin
+        if (weight >= 81 /*QFont::Black*/)
+            result = QCoreApplication::translate("QFontDatabase", "Black");
+        else if (weight >= QFont::Bold)
+            result = QCoreApplication::translate("QFontDatabase", "Bold");
+        else if (weight >= QFont::DemiBold)
+            result = QCoreApplication::translate("QFontDatabase", "Demi Bold");
+        else if (weight >= QFont::Medium)
+            result = QCoreApplication::translate("QFontDatabase", "Medium", "The Medium font weight");
+    } else {
+        if (weight <= QFont::Thin)
+            result = QCoreApplication::translate("QFontDatabase", "Thin");
+        else if (weight <= QFont::ExtraLight)
+            result = QCoreApplication::translate("QFontDatabase", "Extra Light");
+        else if (weight <= QFont::Light)
+            result = QCoreApplication::translate("QFontDatabase", "Light");
+    }
 
     if (style == QFont::StyleItalic)
         result += QLatin1Char(' ') + QCoreApplication::translate("QFontDatabase", "Italic");
@@ -1185,8 +1210,10 @@ static QString styleStringHelper(int weight, QFont::Style style)
         result += QLatin1Char(' ') + QCoreApplication::translate("QFontDatabase", "Oblique");
 
     if (result.isEmpty())
-        result = QCoreApplication::translate("QFontDatabase", "Normal");
+        result = QCoreApplication::translate("QFontDatabase", "Normal", "The Normal or Regular font weight");
 
+    // RJVB
+//    qDebug() << "styleStringHelper.weight=" << weight << "style=" << style << "=>" << result;
     return result.simplified();
 }
 
@@ -1692,6 +1719,9 @@ QFont QFontDatabase::font(const QString &family, const QString &style,
     if (!s) // no styles found?
         return QGuiApplication::font();
 
+    // RJVB
+//    qDebug() << "QFontDatabase::font(" << family << "," << style << "," << pointSize << ")"
+//             << "will load font with weight" << s->key.weight << "and style" << s->styleName << s->key.style;
     QFont fnt(family, pointSize, s->key.weight);
     fnt.setStyle((QFont::Style)s->key.style);
     if (!s->styleName.isEmpty())
diff --git qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
index 26ae0eb..8add57c 100644
--- qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
+++ qtbase/src/platformsupport/fontdatabases/basic/qbasicfontdatabase.cpp
@@ -288,7 +288,7 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
                 weight = QFont::Light;
             else if (os2->usWeightClass < 450)
                 weight = QFont::Normal;
-            else if (os2->usWeightClass < 650)
+            else if (os2->usWeightClass <= 650)
                 weight = QFont::DemiBold;
             else if (os2->usWeightClass < 750)
                 weight = QFont::Bold;
@@ -297,15 +297,15 @@ QStringList QBasicFontDatabase::addTTFile(const QByteArray &fontData, const QByt
 
             if (os2->panose[2] >= 2) {
                 int w = os2->panose[2];
-                if (w <= 3)
+                if (w <= 4)
                     weight = QFont::Light;
                 else if (w <= 5)
                     weight = QFont::Normal;
-                else if (w <= 7)
-                    weight = QFont::DemiBold;
                 else if (w <= 8)
+                    weight = QFont::DemiBold;
+                else if (w == 9)
                     weight = QFont::Bold;
-                else if (w <= 10)
+                else if (w <= 11)
                     weight = QFont::Black;
             }
         }
diff --git qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
index ca7afb7..17d3167 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qcoretextfontdatabase.mm
@@ -266,7 +266,7 @@ static void getFontDescription(CTFontDescriptorRef font, FontDescription *fd)
         if (CFNumberRef weightValue = (CFNumberRef) CFDictionaryGetValue(styles, kCTFontWeightTrait)) {
             double normalizedWeight;
             if (CFNumberGetValue(weightValue, kCFNumberDoubleType, &normalizedWeight)) {
-                if (normalizedWeight >= 0.62)
+                if (normalizedWeight >= 0.5)
                     fd->weight = QFont::Black;
                 else if (normalizedWeight >= 0.4)
                     fd->weight = QFont::Bold;
diff --git qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
index 6e2c8a2..6950574 100644
--- qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
+++ qtbase/src/platformsupport/fontdatabases/mac/qfontengine_coretext.mm
@@ -137,7 +137,8 @@ static QFont::Weight weightFromInteger(int weight)
         return QFont::Normal;
     else if (weight < 700)
         return QFont::DemiBold;
-    else if (weight < 800)
+    // Ultra and ExtraBold are 750, and heavier than Bold (ex: Nanum, Novarese BQ)
+    else if (weight < 750)
         return QFont::Bold;
     else
         return QFont::Black;
@@ -149,8 +150,19 @@ int getTraitValue(CFDictionaryRef allTraits, CFStringRef trait)
         CFNumberRef traitNum = (CFNumberRef) CFDictionaryGetValue(allTraits, trait);
         float v = 0;
         CFNumberGetValue(traitNum, kCFNumberFloatType, &v);
-        // the value we get from CFNumberRef is from -1.0 to 1.0
+        // the value we get from CFNumberRef is from -1.0 to 1.0:
+        // Thin (-0.6), Light (-0.4) or Book (-0.23 !)
+        // Normal or Regular : (0)
+        // Demi Bold, Semi Bold or Medium (0.23 or 0.3)
+        // Bold (0.4)
+        // ExtraBold or Ultra (0.5), Heavy or Black (0.62)
         int value = v * 500 + 500;
+        // value:
+        // Thin (200), Light (300) or Book (385 !)
+        // Normal or Regular : (500)
+        // Demi Bold, Semi Bold or Medium (615 or 650)
+        // Bold (700)
+        // ExtraBold or Ultra (750), Heavy or Black (810)
         return value;
     }
 
diff --git qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
index a18f721..1596827 100644
--- qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
+++ qtbase/src/plugins/platforms/cocoa/qcocoafontdialoghelper.mm
@@ -446,19 +446,68 @@ public:
 
         int weight = 5;
         NSFontTraitMask mask = 0;
-        if (font.style() == QFont::StyleItalic) {
+        if (font.style() == QFont::StyleItalic || font.style() == QFont::StyleOblique) {
             mask |= NSItalicFontMask;
         }
-        if (font.weight() == QFont::Bold) {
-            weight = 9;
-            mask |= NSBoldFontMask;
+        // RJVB
+        // UltraLight -> 2 or 3
+        // Thin,Light -> 3, Book -> 4
+        // Normal/Regular -> 5
+        // Medium/SemiBold/Demibold -> 6,7,8
+        // Bold -> 9
+        // Ultra/Black/Heavy -> 10,11
+        QVector<int> weights;
+        switch (font.weight()) {
+            case QFont::Thin:
+                weights << 2;
+                // fall through
+            case QFont::Light:
+            case QFont::ExtraLight:
+                weights << 3 << 4;
+                break;
+            case QFont::Normal:
+                weights << 5;
+                break;
+            case QFont::Medium:
+                weights << 6;
+                // fall through
+            case QFont::DemiBold:
+                weights << 7 << 8;
+                break;
+            case QFont::Bold:
+                weights << 9;
+                break;
+            case QFont::Black:
+                weights << 10 << 11;
+                break;
         }
 
         QFontInfo fontInfo(font);
-        nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
-            traits:mask
-            weight:weight
-            size:fontInfo.pointSize()];
+        if (!weights.isEmpty()) {
+            for (int i = 0 ; i < weights.size() && !nsFont ; ++i) {
+                weight = weights[i];
+                nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                         traits:mask
+                         weight:weight
+                         size:fontInfo.pointSize()];
+//                  qDebug() << "setCurrentFont: found" << font << "with Qt weight" << font.weight() << "as NSFont weight" << weight << "(index" << i << ")";
+//                  NSLog(@"NSFont=%@", nsFont);
+                 if ([mgr weightOfFont:const_cast<NSFont *>(nsFont)] != weight) {
+                     nsFont = NULL;
+                 }
+            }
+        }
+        if (!nsFont) {
+            // fallback to the older approach
+            if (font.weight() == QFont::Bold) {
+                weight = 9;
+                mask |= NSBoldFontMask;
+            }
+            nsFont = [mgr fontWithFamily:QCFString::toNSString(fontInfo.family())
+                     traits:mask
+                     weight:weight
+                     size:fontInfo.pointSize()];
+        }
 
         [mgr setSelectedFont:const_cast<NSFont *>(nsFont) isMultiple:NO];
         mDelegate->mQtFont = font;
diff --git qtbase/src/widgets/dialogs/qfontdialog.cpp qtbase/src/widgets/dialogs/qfontdialog.cpp
index fc9f36f..8e8bb57 100644
--- qtbase/src/widgets/dialogs/qfontdialog.cpp
+++ qtbase/src/widgets/dialogs/qfontdialog.cpp
@@ -330,6 +330,25 @@ void QFontDialogPrivate::init()
 
     familyList->setFocus();
     retranslateStrings();
+    // RJVB 20150916
+    lightStyles << QCoreApplication::translate("QFontDatabase", "Thin")
+                << QCoreApplication::translate("QFontDatabase", "Light");
+    bookStyles << QCoreApplication::translate("QFontDatabase", "Book");
+    normalStyles << QCoreApplication::translate("QFontDatabase", "Normal")
+                << QCoreApplication::translate("QFontDatabase", "Regular")
+                << QCoreApplication::translate("QFontDatabase", "Roman");
+    demiBoldStyles << QCoreApplication::translate("QFontDatabase", "Medium")
+                << QCoreApplication::translate("QFontDatabase", "DemiBold")
+                << QCoreApplication::translate("QFontDatabase", "Demi Bold")
+                << QCoreApplication::translate("QFontDatabase", "SemiBold")
+                << QCoreApplication::translate("QFontDatabase", "Semi Bold");
+    blackStyles << QCoreApplication::translate("QFontDatabase", "Black")
+                << QCoreApplication::translate("QFontDatabase", "Ultra")
+                << QCoreApplication::translate("QFontDatabase", "Heavy")
+                << QCoreApplication::translate("QFontDatabase", "UltraBold");
+    italicStyle = QCoreApplication::translate("QFontDatabase", "Italic");
+    obliqueStyle = QCoreApplication::translate("QFontDatabase", "Oblique");
+    slantStyles << italicStyle << obliqueStyle;
 }
 
 /*!
@@ -559,6 +578,27 @@ void QFontDialogPrivate::updateFamilies()
     updateStyles();
 }
 
+// static QStringList lastCheckList;
+static inline bool qstringCompareToList(QString &style, QStringList &checkList, bool exact, Qt::CaseSensitivity mode = Qt::CaseInsensitive)
+{
+    if (exact) {
+        Q_FOREACH (const QString pattern, checkList) {
+            if (style.compare(pattern, mode) == 0) {
+//                 lastCheckList = checkList;
+                return true;
+            }
+        }
+    } else {
+        Q_FOREACH (const QString pattern, checkList) {
+            if (style.contains(pattern, mode)) {
+//                 lastCheckList = checkList;
+                return true;
+            }
+        }
+    }
+    return false;
+}
+
 /*
     Updates the contents of the "font style" list box. This
     function can be reimplemented if you have special requirements.
@@ -568,32 +608,75 @@ void QFontDialogPrivate::updateStyles()
     Q_Q(QFontDialog);
     QStringList styles = fdb.styles(familyList->currentText());
     styleList->model()->setStringList(styles);
+    // RJVB
+//     qDebug() << "QFontDialogPrivate::updateStyles() familyList="
+//             << familyList->currentText() << "style=" << style
+//             << "styles=" << styles << "styleList=" << styleList;
 
     if (styles.isEmpty()) {
         styleEdit->clear();
         smoothScalable = false;
     } else {
+        QStringList lLightStyles = lightStyles, lDemiBoldStyles = demiBoldStyles;
+        QString lightStr = QCoreApplication::translate("QFontDatabase", "Light"),
+            mediumStr = QCoreApplication::translate("QFontDatabase", "Medium");
         if (!style.isEmpty()) {
             bool found = false;
             bool first = true;
             QString cstyle = style;
+            bool compareExact = true;
 
         redo:
+            if (style.contains(lightStr, Qt::CaseInsensitive) && !styles.contains(lightStr, Qt::CaseInsensitive)) {
+                // this is a Book weight that was "demoted" to Light because Qt doesn't know Book as a separate style,
+                // so we add Book as a valid synonym to lightStyles.
+                lLightStyles << QCoreApplication::translate("QFontDatabase", "Book");
+            }
+            if (style.contains(mediumStr, Qt::CaseInsensitive) && !styles.contains(mediumStr, Qt::CaseInsensitive)) {
+                // this was a deduced Medium style which isn't called that way by the font family
+                lDemiBoldStyles << QCoreApplication::translate("QFontDatabase", "Medium");
+            }
             for (int i = 0; i < (int)styleList->count(); i++) {
-                if (cstyle == styleList->text(i)) {
+                QString istyle = styleList->text(i);
+                if (cstyle == istyle) {
                      styleList->setCurrentItem(i);
                      found = true;
                      break;
                  }
+                // RJVB 20150419: handle style synonyms
+                if ((qstringCompareToList(cstyle, lLightStyles, compareExact) && qstringCompareToList(istyle, lLightStyles, compareExact))
+                        || (qstringCompareToList(cstyle, bookStyles, compareExact) && qstringCompareToList(istyle, bookStyles, compareExact))
+                        || (qstringCompareToList(cstyle, normalStyles, compareExact) && qstringCompareToList(istyle, normalStyles, compareExact))
+                        || (qstringCompareToList(cstyle, lDemiBoldStyles, compareExact) && qstringCompareToList(istyle, lDemiBoldStyles, compareExact))
+                        || (qstringCompareToList(cstyle, blackStyles, compareExact) && qstringCompareToList(istyle, blackStyles, compareExact))) {
+//                     qDebug() << "cstyle=" << cstyle << "matches istyle=" << istyle << "for weight; exact matching=" << compareExact
+//                         << "hit in list" << lastCheckList;
+                    if ((qstringCompareToList(cstyle, slantStyles, false) == qstringCompareToList(istyle, slantStyles, false))) {
+//                         qDebug() << "cstyle=" << cstyle << "also matches istyle=" << istyle << "for slant" << slantStyles;
+                        styleList->setCurrentItem(i);
+                        found = true;
+                        break;
+                    }
+//                     else {
+//                         qDebug() << "(" << cstyle << "," << istyle << ") vs" << slantStyles << "="
+//                             << qstringCompareToList(cstyle, slantStyles, false) << qstringCompareToList(istyle, slantStyles, false);
+//                     }
+                }
+            }
+            if (!found && compareExact) {
+                compareExact = false;
+                goto redo;
             }
             if (!found && first) {
-                if (cstyle.contains(QLatin1String("Italic"))) {
-                    cstyle.replace(QLatin1String("Italic"), QLatin1String("Oblique"));
+                if (cstyle.contains(italicStyle, Qt::CaseInsensitive)) {
+                    cstyle.replace(italicStyle, obliqueStyle, Qt::CaseInsensitive);
                     first = false;
+                    compareExact = true;
                     goto redo;
-                } else if (cstyle.contains(QLatin1String("Oblique"))) {
-                    cstyle.replace(QLatin1String("Oblique"), QLatin1String("Italic"));
+                } else if (cstyle.contains(obliqueStyle, Qt::CaseInsensitive)) {
+                    cstyle.replace(obliqueStyle, italicStyle, Qt::CaseInsensitive);
                     first = false;
+                    compareExact = true;
                     goto redo;
                 }
             }
@@ -814,6 +897,8 @@ void QFontDialog::setCurrentFont(const QFont &font)
         QFontInfo fi(font);
         d->size = fi.pointSize();
     }
+    // RJVB
+//    qDebug() << "QFontDialog::setCurrentFont" << font << "family=" << d->family << "style=" << d->style << "size=" << d->size;
     d->strikeout->setChecked(font.strikeOut());
     d->underline->setChecked(font.underline());
     d->updateFamilies();
diff --git qtbase/src/widgets/dialogs/qfontdialog_p.h qtbase/src/widgets/dialogs/qfontdialog_p.h
index 18429e8..05004ce 100644
--- qtbase/src/widgets/dialogs/qfontdialog_p.h
+++ qtbase/src/widgets/dialogs/qfontdialog_p.h
@@ -149,6 +149,9 @@ public:
 private:
     virtual void initHelper(QPlatformDialogHelper *);
     virtual void helperPrepareShow(QPlatformDialogHelper *);
+    // RJVB 20150511
+    QStringList lightStyles, bookStyles, normalStyles, demiBoldStyles, blackStyles, slantStyles;
+    QString obliqueStyle, italicStyle;
 };
 
 #endif // QT_NO_FONTDIALOG
